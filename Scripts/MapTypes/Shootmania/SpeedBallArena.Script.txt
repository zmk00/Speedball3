/****************************************
*	MapType for SpeedBall Title Maps	*
*	Author:		steeffeen				*
*	Contact:	mail@steeffeen.com		*
****************************************/

#RequireContext CSmMapType

#Const	Version	"1.6 (2013-10-20)"

#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

/****************************************
	CONSTANTS
****************************************/

#Const Rules """You must place the same number of $<$f80Spawn$> $<$00f#1$> and $<$f80Spawn$> $<$f00#2$>.

You must place exactly one of each $<$08fGoal$>, while:
- $<$f80Spawn$> $<$00f#1$> captures at $<$08fGoal$> $<$f00#2$>,
- $<$f80Spawn$> $<$f00#2$> captures at $<$08fGoal$> $<$00f#1$> and
- $<$08fGoal$> $<$0f0#3$> is the Ball $<$f80Spawn$>"""

/****************************************
	FUNCTIONS
****************************************/

// Check if the map is valid
Void UpdateValidability() {
	ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	Anchor::UpdateAnchorCounts();
	
	// Check for needed spawns and goals
	declare NbSpawns = [1 => 0, 2 => 0];
	foreach (Anchor in AnchorData) {
		if (!NbSpawns.existskey(Anchor.Order)) continue;
		switch (Anchor.Tag) {
			case "Spawn": {
				NbSpawns[Anchor.Order] += 1;
			}
		}
	}
	if (NbSpawns[1] != NbSpawns[2]) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = TextLib::Compose(
			_("You must place exactly the same number of Spawn #1 and Spawn #2!\n(You have %1x #1 and %2x #2)"),
			TextLib::ToText(NbSpawns[1]), TextLib::ToText(NbSpawns[2]));
		return;
	}
	
	// Check for needed goals
	for (I, 1, 3) {
		if (!Anchor::HasExactlyOneAnchor("Goal", I, TextLib::Compose(_("You must place exactly one Goal #%1!"), TextLib::ToText(I)))) {
			return;
		}
	}
	
	// Check for unused spawns or goals
	if (Anchor::HasAtLeastOneAnchor("Spawn", 0, "")) {
		ValidationStatus = CSmMapType::ValidationStatus::Validable;
		ValidabilityRequirementsMessage = _("You have at least one unused Spawn!");
		return;
	}
	if (Anchor::HasAtLeastOneAnchor("Goal", 0, "")) {
		ValidationStatus = CSmMapType::ValidationStatus::Validable;
		ValidabilityRequirementsMessage = _("You have at least one unused Goal!");
		return;
	}
	
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
	ValidabilityRequirementsMessage = "";
}

// Return the manialink for spawn anchor edition
Text EditSpawnAnchorManialink(Ident _AnchorId) {
	declare MLText = """<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [	(Page.GetFirstChild("1") as CMlLabel),
								(Page.GetFirstChild("2") as CMlLabel),
								(Page.GetFirstChild("Deco") as CMlLabel),
								(Page.GetFirstChild("Cancel") as CMlLabel)];
			
			declare Text AnchorTag for Page;
			declare Integer AnchorOrder for Page;
			declare Boolean Finish for Page;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach (Button in Buttons) {
					if (AnchorOrder == TextLib::ToInteger(Button.ControlId) || AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							switch (Event.ControlId) {
								case "Cancel": {
								}
								case "Deco": {
									AnchorTag = "Deco";
									AnchorOrder = 0;
								}
								default: {
									AnchorTag = "Spawn";
									AnchorOrder = TextLib::ToInteger(Event.ControlId);
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 40">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 7 3" style="TextTitle3" textsize="4" textprefix="$fff" text="Edit Spawn" translate="1" halign="center" valign="center2"/>
		
		<quad posn="0 0 -1" sizen="68 28" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="1" posn="-22 -4" textsize="7" halign="left" valign="center2" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="2" posn="-2 -4" textsize="7" halign="right" valign="center2" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="Deco" posn="15 -4" textsize="3" halign="center" valign="center2" style="TextButtonSmall" ScriptEvents="1"/>
			<label id="Cancel" posn="0 -15" style="CardButtonSmall" ScriptEvents="1" translate="1" halign="center" valign="center2"/>
		</frame>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 7 3" style="TextTitle3" textsize="3" textprefix="$fff" text="Rules" translate="1" halign="center" valign="center2"/>
		
		<quad posn="0 0 -1" sizen="68 40" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-30 -4">
			<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" textsize="2" textprefix="$333"
				text="{{{Rules}}}" translate="1"/>
		</frame>
	</frame>
	""";
  
	return MLText;
}

// Return the manialink for goal anchor edition
Text EditGoalAnchorManialink(Ident _AnchorId) {
	declare MLText = """<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [	(Page.GetFirstChild("1") as CMlLabel),
								(Page.GetFirstChild("2") as CMlLabel),
								(Page.GetFirstChild("3") as CMlLabel),
								(Page.GetFirstChild("Deco") as CMlLabel),
								(Page.GetFirstChild("Cancel") as CMlLabel)];
			
			declare Text AnchorTag for Page;
			declare Integer AnchorOrder for Page;
			declare Boolean Finish for Page;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach (Button in Buttons) {
					if (AnchorOrder == TextLib::ToInteger(Button.ControlId) || AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							switch (Event.ControlId) {
								case "Cancel": {
								}
								case "Deco": {
									AnchorTag = "Deco";
									AnchorOrder = 0;
								}
								default: {
									AnchorTag = "Goal";
									AnchorOrder = TextLib::ToInteger(Event.ControlId);
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 40">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 7 3" style="TextTitle3" textsize="4" textprefix="$fff" text="Edit Goal" translate="1" halign="center" valign="center2"/>
		
		<quad posn="0 0 -1" sizen="68 28" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -9">
			<label id="1" posn="-23 0" textsize="7" style="TextButtonMedium" ScriptEvents="1" halign="left" valign="center2"/>
			<label id="2" posn="-10 0" textsize="7" style="TextButtonMedium" ScriptEvents="1" halign="center" valign="center2"/>
			<label id="3" posn="3 0" textsize="7" style="TextButtonMedium" ScriptEvents="1" halign="right" valign="center2"/>
			<label id="Deco" posn="28 0" textsize="3" style="TextButtonSmall" ScriptEvents="1" halign="right" valign="center2"/>
			<label id="Cancel" posn="0 -11" style="CardButtonSmall" ScriptEvents="true" translate="1" halign="center" valign="center2"/>
		</frame>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 7 3" style="TextTitle3" textsize="3" textprefix="$fff" text="Rules" translate="1" halign="center" valign="center2"/>
		
		<quad posn="0 0 -1" sizen="68 40" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-30 -3">
			<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" textsize="2" textprefix="$333"
				text="{{{Rules}}}" translate="1"/>
		</frame>
	</frame>
	""";
  
	return MLText;
}

// Show the anchor edition manialink
Void EditAnchorData(Ident _AnchorId) {
	UpdateValidability();

	declare Text AnchorTag for ManialinkPage;
	declare Integer AnchorOrder for ManialinkPage;
	declare Boolean Finish for ManialinkPage;
	
	switch (AnchorData[_AnchorId].DefaultTag) {
		case "Spawn": {
			ManialinkText = EditSpawnAnchorManialink(_AnchorId);
		}
		case "Goal": {
			ManialinkText = EditGoalAnchorManialink(_AnchorId);
		}
		case "Checkpoint": {
			ManialinkText = EditGoalAnchorManialink(_AnchorId);
		}
	}
	AnchorTag = AnchorData[_AnchorId].Tag;
	AnchorOrder = AnchorData[_AnchorId].Order;
	
	Finish = False;
	while (!Finish) {
		yield;
	}
	
	AnchorData[_AnchorId].Tag = AnchorTag;
	AnchorData[_AnchorId].Order = AnchorOrder;
	
	UpdateValidability();
}

/****************************************
	MAIN
****************************************/

main() {
	CustomEditAnchorData = True;
	
	declare metadata Text ScriptVersion for Map;
	ScriptVersion = Version;
	
	UpdateValidability();
	
	while (True) {
		yield;
		
		ManialinkText = "";
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified: {
					UpdateValidability();
				}
				case CPluginEvent::Type::EditAnchor: {
					EditAnchorData(Event.EditedAnchorDataId);
				}
				case CPluginEvent::Type::StartValidation: {
					if (ValidationStatus != CSmMapType::ValidationStatus::Validated) continue;
					StartTestMapWithMode("SpeedBall.Script.txt");
				}
			}
		}		
	}	
}
